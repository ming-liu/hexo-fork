{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/images/zkservice.jpg","path":"images/zkservice.jpg","modified":1},{"_id":"source/images/zkperfreliability.jpg","path":"images/zkperfreliability.jpg","modified":1},{"_id":"source/images/zkperfRW-3.2.jpg","path":"images/zkperfRW-3.2.jpg","modified":1},{"_id":"source/images/zknamespace.jpg","path":"images/zknamespace.jpg","modified":1},{"_id":"source/images/zkcomponents.jpg","path":"images/zkcomponents.jpg","modified":1},{"_id":"source/images/zk-over.jpg","path":"images/zk-over.jpg","modified":1},{"_id":"source/images/zk-count.jpg","path":"images/zk-count.jpg","modified":1},{"_id":"source/images/signal.png","path":"images/signal.png","modified":1},{"_id":"source/images/nbio.png","path":"images/nbio.png","modified":1},{"_id":"source/images/multi.png","path":"images/multi.png","modified":1},{"_id":"source/images/cp.png","path":"images/cp.png","modified":1},{"_id":"source/images/bio.png","path":"images/bio.png","modified":1},{"_id":"source/images/aio.png","path":"images/aio.png","modified":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_posts/NIOServerCnxnFactory.md","shasum":"a8bf82c7a4a5d7523b5428a510f24c1738e95f32","modified":1499814713000},{"_id":"source/_posts/FastLeaderElection.md","shasum":"6a73acdd94d8f67682a4977191d025335a0917d8","modified":1501993883000},{"_id":"source/_posts/activemq-in-action-index.md","shasum":"d74a0fed7250971e594a7c351658462ad0dd7553","modified":1476143497000},{"_id":"source/_posts/activemq-install.md","shasum":"d389e07ad43107d4d10a780590e7e4d7a8c28353","modified":1472601570000},{"_id":"source/_posts/architectrue.md","shasum":"af27b8ac84f323504ef12c9869ace5ce98d3cf01","modified":1457614290000},{"_id":"source/_posts/activemq.md","shasum":"7b6af3c8a7f9e1de0c96fb896bc8f80d723fb454","modified":1472394994000},{"_id":"source/_posts/hexo-guide.md","shasum":"c2504a3955aff4060c2c29f5ee30101593e56a90","modified":1456788427000},{"_id":"source/_posts/hello-world.md","shasum":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1454509138000},{"_id":"source/_posts/centos-wordpress.md","shasum":"c65ca2877416bf1f18eaf1c2bf52c3116cdfa4cc","modified":1455934502000},{"_id":"source/_posts/java-interview.md","shasum":"108989ce9afe0d5eb84d4980f6a604c48d8b8e20","modified":1458711545000},{"_id":"source/_posts/jvm.md","shasum":"9781ff4a00cb13293a68ee8c7792545fca81f25b","modified":1456898551000},{"_id":"source/_posts/multi-thread-interview.md","shasum":"e707e220eaaefd60047433ebe64efd2f3ab1d2ba","modified":1458711262000},{"_id":"source/_posts/written-at-the-begining-of-2016.md","shasum":"91c06bc90a504f2f06f824454ba231d52f699ac3","modified":1499814317000},{"_id":"source/_posts/nio.md","shasum":"a057761c19ae562b50ae94058ba13ce3b314d322","modified":1457776378000},{"_id":"source/_posts/zookeeper.md","shasum":"110d6b9fa732e3046600d04c306945f51f9a6c5a","modified":1471482062000},{"_id":"source/_posts/zookeeper001.md","shasum":"d45ca04e6b07f001577f2f822eaa26630512dd5c","modified":1471216131000},{"_id":"source/_posts/zookeeper002.md","shasum":"2603f10e8329b2b7181f1917469d37e4721b6a82","modified":1471482044000},{"_id":"source/_posts/zookeeper003.md","shasum":"313bf6c1ce512c9192b9a5beb55fa6a74afefd47","modified":1471482001000},{"_id":"source/_posts/zookeeper004.md","shasum":"294fd1f4afb057ab3f1ce52107e3530bcaf9a172","modified":1471481995000},{"_id":"source/_posts/zookeeper4.md","shasum":"c04671c2abb9c29b737d734d305a51a1e47b5dcb","modified":1471481969000},{"_id":"source/images/zk-count.jpg","shasum":"0fb31e307c1b6a07a482cc28ef2b7074aba3fae4","modified":1468126225000},{"_id":"source/images/zkcomponents.jpg","shasum":"d00d3bc0b6b2022510d5a4a23b67c9c7c25a7d2e","modified":1470235409000},{"_id":"source/images/zkperfRW-3.2.jpg","shasum":"d0f3b1293891d54d4d5d5f9f5333034c5954327f","modified":1470235409000},{"_id":"source/images/zknamespace.jpg","shasum":"d0207adf88ed531749a86d9b100f503b121e3c67","modified":1470235409000},{"_id":"source/images/bio.png","shasum":"d3eca09a4e06d058d350a9abd76762dd56968e9d","modified":1454555983000},{"_id":"source/images/aio.png","shasum":"107f4c1584549bc640d789ca73ce7c822f820b2f","modified":1454556640000},{"_id":"source/images/nbio.png","shasum":"b2ea491873f41a5876c4910d15829472bff6ce8b","modified":1454556134000},{"_id":"source/images/multi.png","shasum":"1bab21582caf99cf988c96e7ca70d63919b3171f","modified":1454556261000},{"_id":"source/images/signal.png","shasum":"335155f05fd7418eacc8dd828a3b7523256ca20b","modified":1454556564000},{"_id":"source/images/zkperfreliability.jpg","shasum":"ca8a7410cc1c4479610794f5ed815a7a6d8babdd","modified":1471065219000},{"_id":"source/images/zkservice.jpg","shasum":"3045c7da0e924031f16bc17b91d610a4fd043833","modified":1470235409000},{"_id":"source/images/cp.png","shasum":"713a2f9b78d8ae49142ce5bd9f43ba7ba8a9f7a0","modified":1454557228000},{"_id":"source/images/zk-over.jpg","shasum":"b177040252f6d375a22a8475d79e38dd17ef4993","modified":1468125477000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1454509224000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1454509224000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1454509224000},{"_id":"themes/landscape/_config.yml","shasum":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1454509224000},{"_id":"themes/landscape/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1454509224000},{"_id":"themes/landscape/languages/zh-CN.yml","shasum":"751c74830d5609969f1fd6e7fa933ecd5756117a","modified":1454509224000},{"_id":"themes/landscape/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"30806481bc1233996e6f0c8ec59d23c3a55df034","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"c02b8673ef726ca520e0d24361bedca846410295","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1454509224000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1454509224000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1454509224000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"71754895e33fd57a3d47c4e3bf52cb6aa25623f7","modified":1454509224000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"500217790ff080a6a20f96193a245a8c1e770e72","modified":1454509224000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"e9e367de7086b874e694389985236793f80251e0","modified":1454509224000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1454509224000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1454509224000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1454509224000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1454509224000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1454509224000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1454509224000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1454509224000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1454509224000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1454509224000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1454509224000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1471077674000},{"_id":"themes/landscape/source/css/_my/my.styl","shasum":"eedb56008d41da38c4b5b4da06d4243ce78a2fb5","modified":1471081628000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1454509224000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1454509224000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1454509224000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1454509224000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1454509224000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1454509224000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1454509224000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1454509224000},{"_id":"themes/landscape/source/css/style.styl","shasum":"36767a624eba32b42df761c2c7480d0af4d3614f","modified":1471077817000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1454509224000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1454509224000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1454509224000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1454509224000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1454509224000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1454509224000},{"_id":"public/images/zkservice.jpg","modified":1509491922376,"shasum":"3045c7da0e924031f16bc17b91d610a4fd043833"},{"_id":"public/images/zkperfreliability.jpg","modified":1509491922381,"shasum":"ca8a7410cc1c4479610794f5ed815a7a6d8babdd"},{"_id":"public/images/zkperfRW-3.2.jpg","modified":1509491922383,"shasum":"d0f3b1293891d54d4d5d5f9f5333034c5954327f"},{"_id":"public/images/zknamespace.jpg","modified":1509491922385,"shasum":"d0207adf88ed531749a86d9b100f503b121e3c67"},{"_id":"public/images/zkcomponents.jpg","modified":1509491922387,"shasum":"d00d3bc0b6b2022510d5a4a23b67c9c7c25a7d2e"},{"_id":"public/images/zk-over.jpg","modified":1509491922389,"shasum":"b177040252f6d375a22a8475d79e38dd17ef4993"},{"_id":"public/images/zk-count.jpg","modified":1509491922392,"shasum":"0fb31e307c1b6a07a482cc28ef2b7074aba3fae4"},{"_id":"public/images/signal.png","modified":1509491922401,"shasum":"335155f05fd7418eacc8dd828a3b7523256ca20b"},{"_id":"public/images/nbio.png","modified":1509491922410,"shasum":"b2ea491873f41a5876c4910d15829472bff6ce8b"},{"_id":"public/images/multi.png","modified":1509491922413,"shasum":"1bab21582caf99cf988c96e7ca70d63919b3171f"},{"_id":"public/images/cp.png","modified":1509491922417,"shasum":"713a2f9b78d8ae49142ce5bd9f43ba7ba8a9f7a0"},{"_id":"public/images/bio.png","modified":1509491922422,"shasum":"d3eca09a4e06d058d350a9abd76762dd56968e9d"},{"_id":"public/images/aio.png","modified":1509491922433,"shasum":"107f4c1584549bc640d789ca73ce7c822f820b2f"},{"_id":"public/js/script.js","modified":1509491922434,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1509491922435,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1509491922436,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1509491922438,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1509491922439,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1509491922440,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1509491922443,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1509491922454,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1509491922457,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1509491922458,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1509491922463,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1509491922473,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1509491922478,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1509491922480,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1509491922489,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1509491922492,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1509491923049,"shasum":"db304907fdf85990adc1eb1a5bd30a63afeb9259"},{"_id":"public/css/images/banner.jpg","modified":1509491923200,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1509491923203,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1509491923206,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1509491923210,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1509491923213,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1509491923216,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/FastLeaderElection.html","modified":1509491923273,"shasum":"28d02aff7a41ce254ae161f9586a6d0f677a0f6b"},{"_id":"public/NIOServerCnxnFactory.html","modified":1509491923298,"shasum":"19276d6ae50dddd2907703a85c9e9fe8f0024fd3"},{"_id":"public/activemq-in-action-index.html","modified":1509491923304,"shasum":"c5ab4ab053b4dd7aa08348b9cb8fae8bddeb534e"},{"_id":"public/activemq-install.html","modified":1509491923312,"shasum":"b3962c254da12a8871419de9b065cf3035496634"},{"_id":"public/activemq.html","modified":1509491923325,"shasum":"032cab878ca46002d0f3f3ec365dad5b3932e7d2"},{"_id":"public/zookeeper4.html","modified":1509491923342,"shasum":"9694dcab62f9a9999912b819764ddda64cef303e"},{"_id":"public/zookeeper004.html","modified":1509491923351,"shasum":"1bb26251bad099fb08543c42639e6e9427acd390"},{"_id":"public/zookeeper002.html","modified":1509491923356,"shasum":"8e2cdf883565dd0b44ada113059d49dc06b61d0b"},{"_id":"public/zookeeper003.html","modified":1509491923367,"shasum":"2cb365c3689b744da099ac23d024dd40d3d7d396"},{"_id":"public/zookeeper001.html","modified":1509491923379,"shasum":"6aab992483155c88584feb8452fb1b7ddfac3431"},{"_id":"public/zookeeper.html","modified":1509491923403,"shasum":"c225e21b29780d01906e32ea82aa10aff5b3eb9d"},{"_id":"public/java-interview.html","modified":1509491923415,"shasum":"19ae573cb630540157df34c76b6b6a9a5e42f0ae"},{"_id":"public/architectrue.html","modified":1509491923420,"shasum":"337ce31b14e1de3c3d73652d97e244c99858c244"},{"_id":"public/jvm.html","modified":1509491923427,"shasum":"0c0ede7b4846b9b19120597e9f70d1ababf00628"},{"_id":"public/multi-thread-interview.html","modified":1509491923437,"shasum":"f4fa761813e68385f9bb431baef68330fc931757"},{"_id":"public/hexo-guide.html","modified":1509491923442,"shasum":"1ea4c370bc5823e4d22f68dd0e118a00120a31b9"},{"_id":"public/centos-wordpress.html","modified":1509491923459,"shasum":"752db4ea016f9f0d96f01e825536b1ce317ffb8e"},{"_id":"public/nio.html","modified":1509491923469,"shasum":"2faee63d0fa825f99c60080fc93963b4e41c399e"},{"_id":"public/written-at-the-begining-of-2016.html","modified":1509491923487,"shasum":"42a80a1f7e3e949cc92032cd91d6ca737a6a1b2a"},{"_id":"public/hello-world.html","modified":1509491923495,"shasum":"53ed7755561cca41d06d42eb1c04536995fca230"},{"_id":"public/archives/index.html","modified":1509491923520,"shasum":"5cca6136838bf787c5d7a3dbd05d5e063cd74029"},{"_id":"public/archives/page/2/index.html","modified":1509491923541,"shasum":"463fa69f69b445ac7b0a2f9e5f5779c0a605cba3"},{"_id":"public/archives/2016/index.html","modified":1509491923560,"shasum":"25ef36805e7ca230257957397702d9d1f75cba81"},{"_id":"public/archives/2016/page/2/index.html","modified":1509491923579,"shasum":"000c1ecb14f636d3165f5560436927d581705f30"},{"_id":"public/archives/2016/02/index.html","modified":1509491923591,"shasum":"b3ea08aa345d33173c8addd348f4506dced3f722"},{"_id":"public/archives/2016/03/index.html","modified":1509491923606,"shasum":"be33312b6ecf30dd5688320d955c91f2e364eba1"},{"_id":"public/archives/2016/07/index.html","modified":1509491923612,"shasum":"f69d49268a2e9dec3125dbb1c83bf206ae5bd1b0"},{"_id":"public/archives/2016/08/index.html","modified":1509491923626,"shasum":"7923c64bd9bf212bdfb4af9a847a0002e8c5261f"},{"_id":"public/archives/2016/09/index.html","modified":1509491923631,"shasum":"c64f6076438d3a182a96e22d33f4ffb4295b6390"},{"_id":"public/archives/2017/index.html","modified":1509491923640,"shasum":"9b6d51a4dae8ab6621d0d870f35a0a32228621d3"},{"_id":"public/archives/2017/07/index.html","modified":1509491923652,"shasum":"b5a60ef0a9acd35ac9fae4369f7d9678ea94f2ee"},{"_id":"public/index.html","modified":1509491923687,"shasum":"56a1e3568d5669f662ea86623e156aafce2059ba"},{"_id":"public/page/2/index.html","modified":1509491923710,"shasum":"a5e6b14d1090c43f2600a4c9ecdcf65956945f08"},{"_id":"public/tags/zookeeper/index.html","modified":1509491923721,"shasum":"8992582e72157005ed21468d6650482bed493bb2"},{"_id":"public/tags/ActiveMQ/index.html","modified":1509491923726,"shasum":"b19b95d574566d6a67a014344454919d3f627b86"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FastLeaderElection","date":"2017-07-12T23:12:49.000Z","_content":"\n启动:\n\nprivate void starter(QuorumPeer self, QuorumCnxManager manager) {\n        this.self = self;\n        proposedLeader = -1;\n        proposedZxid = -1;\n\n        sendqueue = new LinkedBlockingQueue<ToSend>();\n        recvqueue = new LinkedBlockingQueue<Notification>();\n        this.messenger = new Messenger(manager);\n    }\n\norg.apache.zookeeper.server.quorum.FastLeaderElection.ToSend    ","source":"_posts/FastLeaderElection.md","raw":"---\ntitle: FastLeaderElection\ndate: 2017-07-13 07:12:49\ntags:\n---\n\n启动:\n\nprivate void starter(QuorumPeer self, QuorumCnxManager manager) {\n        this.self = self;\n        proposedLeader = -1;\n        proposedZxid = -1;\n\n        sendqueue = new LinkedBlockingQueue<ToSend>();\n        recvqueue = new LinkedBlockingQueue<Notification>();\n        this.messenger = new Messenger(manager);\n    }\n\norg.apache.zookeeper.server.quorum.FastLeaderElection.ToSend    ","slug":"FastLeaderElection","published":1,"updated":"2017-08-06T04:31:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il7b0000vsjfa9ry5vbg"},{"title":"zookeeper4","date":"2016-08-18T00:59:29.000Z","_content":"","source":"_posts/zookeeper4.md","raw":"---\ntitle: zookeeper4\ndate: 2016-08-18 08:59:29\ntags:\n---\n","slug":"zookeeper4","published":1,"updated":"2016-08-18T00:59:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il7x0001vsjfgqsuge2s"},{"title":"Watcher和WatchedEvent","date":"2016-07-10T02:28:45.000Z","_content":"","source":"_posts/zookeeper004.md","raw":"---\ntitle: Watcher和WatchedEvent\ndate: 2016-07-10 10:28:45\ntags:\n---\n","slug":"zookeeper004","published":1,"updated":"2016-08-18T00:59:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il800002vsjf2wfe4roi"},{"title":"获得源码","date":"2016-07-09T04:17:49.000Z","_content":"\n**1.** 可以从<a href=\"https://github.com/apache/zookeeper\">github</a>上直接clone下来,当然我们以学习为主，可能会做些笔记，建议`Fork`一下，从自己的仓库clone。\n\t```\tbash\n\tgit clone https://github.com/ming-liu/zookeeper.git \n\t```\n**2.** 安装ant [Ant下载](http://ant.apache.org/bindownload.cgi)  [Ant手册](http://ant.apache.org/manual/index.html)\n\n**3.** 生成eclipse项目\n\t```\n\tant eclipse\n\t```\n**4.** 导入eclipse\n\t```bash\n\timport->General->Existing Projects in Workspace\n\t导入之后，通常会有很多编译错误，特别要注意，一定要使用JDK1.7以上版本。检查下.settings/org.eclipse.jdt.core.prefs，里面有6.0/1.6的全部替换成1.7。\n\t```\n**5.** 先概览下包结构\n\t<img src=\"../images/zk-over.jpg\" style=\"height:500px;\">\n**6.** 读源码思路。大概先浏览下包里的内容，核心代码应该在`org.apache.zookeeper`下。那接下来就逐个击破吧，看看这个包下有多少个java类。\n\t<img src=\"../images/zk-count.jpg\" style=\"height:50px;width:400px;\">","source":"_posts/zookeeper003.md","raw":"---\ntitle: 获得源码\ndate: 2016-07-09 12:17:49\ntags:\n---\n\n**1.** 可以从<a href=\"https://github.com/apache/zookeeper\">github</a>上直接clone下来,当然我们以学习为主，可能会做些笔记，建议`Fork`一下，从自己的仓库clone。\n\t```\tbash\n\tgit clone https://github.com/ming-liu/zookeeper.git \n\t```\n**2.** 安装ant [Ant下载](http://ant.apache.org/bindownload.cgi)  [Ant手册](http://ant.apache.org/manual/index.html)\n\n**3.** 生成eclipse项目\n\t```\n\tant eclipse\n\t```\n**4.** 导入eclipse\n\t```bash\n\timport->General->Existing Projects in Workspace\n\t导入之后，通常会有很多编译错误，特别要注意，一定要使用JDK1.7以上版本。检查下.settings/org.eclipse.jdt.core.prefs，里面有6.0/1.6的全部替换成1.7。\n\t```\n**5.** 先概览下包结构\n\t<img src=\"../images/zk-over.jpg\" style=\"height:500px;\">\n**6.** 读源码思路。大概先浏览下包里的内容，核心代码应该在`org.apache.zookeeper`下。那接下来就逐个击破吧，看看这个包下有多少个java类。\n\t<img src=\"../images/zk-count.jpg\" style=\"height:50px;width:400px;\">","slug":"zookeeper003","published":1,"updated":"2016-08-18T01:00:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il810003vsjfcidbwact"},{"title":"ZooKeeper入门指南","date":"2016-07-09T04:17:49.000Z","_content":"\n**1.** 可以从<a href=\"https://github.com/apache/zookeeper\">github</a>上直接clone下来,当然我们以学习为主，可能会做些笔记，建议`Fork`一下，从自己的仓库clone。\n\t```\tbash\n\tgit clone https://github.com/ming-liu/zookeeper.git \n\t```\n**2.** 安装ant [Ant下载](http://ant.apache.org/bindownload.cgi)  [Ant手册](http://ant.apache.org/manual/index.html)\n\n**3.** 生成eclipse项目\n\t```\n\tant eclipse\n\t```\n**4.** 导入eclipse\n\t```bash\n\timport->General->Existing Projects in Workspace\n\t导入之后，通常会有很多编译错误，特别要注意，一定要使用JDK1.7以上版本。检查下.settings/org.eclipse.jdt.core.prefs，里面有6.0/1.6的全部替换成1.7。\n\t```\n**5.** 先概览下包结构\n\t<img src=\"../images/zk-over.jpg\" style=\"height:500px;\">\n**6.** 读源码思路。大概先浏览下包里的内容，核心代码应该在`org.apache.zookeeper`下。那接下来就逐个击破吧，看看这个包下有多少个java类。\n\t<img src=\"../images/zk-count.jpg\" style=\"height:50px;width:400px;\">","source":"_posts/zookeeper002.md","raw":"---\ntitle: ZooKeeper入门指南\ndate: 2016-07-09 12:17:49\ntags:\n---\n\n**1.** 可以从<a href=\"https://github.com/apache/zookeeper\">github</a>上直接clone下来,当然我们以学习为主，可能会做些笔记，建议`Fork`一下，从自己的仓库clone。\n\t```\tbash\n\tgit clone https://github.com/ming-liu/zookeeper.git \n\t```\n**2.** 安装ant [Ant下载](http://ant.apache.org/bindownload.cgi)  [Ant手册](http://ant.apache.org/manual/index.html)\n\n**3.** 生成eclipse项目\n\t```\n\tant eclipse\n\t```\n**4.** 导入eclipse\n\t```bash\n\timport->General->Existing Projects in Workspace\n\t导入之后，通常会有很多编译错误，特别要注意，一定要使用JDK1.7以上版本。检查下.settings/org.eclipse.jdt.core.prefs，里面有6.0/1.6的全部替换成1.7。\n\t```\n**5.** 先概览下包结构\n\t<img src=\"../images/zk-over.jpg\" style=\"height:500px;\">\n**6.** 读源码思路。大概先浏览下包里的内容，核心代码应该在`org.apache.zookeeper`下。那接下来就逐个击破吧，看看这个包下有多少个java类。\n\t<img src=\"../images/zk-count.jpg\" style=\"height:50px;width:400px;\">","slug":"zookeeper002","published":1,"updated":"2016-08-18T01:00:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il830004vsjfd5r388uc"},{"title":"zookeeper概览","date":"2016-07-09T03:58:47.000Z","_content":"\n+ ZooKeeper: 用于分布式应用的分布式协调服务\n\t+ <a href=\"#设计目标\">1、设计目标</a>\n\t+ <a href=\"#数据模型和层级命名空间\">2、数据模型和层级命名空间</a>\n\t+ <a href=\"#节点和临时节点\">3、节点和临时节点</a>\n\t+ <a href=\"#条件更新和监听\">4、条件更新和监听</a>\n\t+ <a href=\"#保障\">5、保障</a>\n\t+ <a href=\"#简单的API\">6、简单的API</a>\n\t+ <a href=\"#实现\">7、实现</a>\n\t+ <a href=\"#使用\">8、使用</a>\n\t+ <a href=\"#性能\">9、性能</a>\n\t+ <a href=\"#可靠性\">10、可靠性</a>\n\t+ <a href=\"#Zookeeper项目\">11、Zookeeper项目</a>\n\n## ZooKeeper: 用于分布式应用的分布式协调服务 ##\n\nZookeeper是一个用于分布式应用上的分布式的、开源的协调服务。它暴露一组简单的组件，在此之上，分布式应用可以实现更高层次的服务，如同步、配置管理、分组和命名等。它被设计得易于开发，并且使用的数据模型也是基于熟识的文件系统的树形结构。运行在Java上，并且与Java和C绑定在一起。\n\n众所周知，分布式服务很难保证正确性。特别易于出现竟态条件或是死锁这样的错误。Zookeeper背后的动机就是，减轻分布式系统从0开始实现协调服务的重担。\n\n<a name=\"设计目标\"></a>\n### 1、设计目标 ###\n\n**1.1 Zookeeper很简单** Zookeeper允许分布式进程之间通过一个共享的命名空间协作交互。这个命名空间和标准的文件系统非常类似。命名空间里包含了注册的数据项，在Zookeeper术语上称为节点。这和文件系统很相似。但区别在于，典型的文件系统是基于存储设计的，Zookeeper的数据都保存在内存里。这意味着，Zookeeper可以获得高吞吐、低延迟。\n\nZookeeper实现时,花了很多精力在高性能、高可用和严格的存取顺序上。高性能意味着Zookeeper可以用在大规模的分布式系统里。可靠性意味着可以避免单点故障。严格的循序控制意味着，客户端可以实现复杂的同步原语。\n\n**1.2 Zookeeper的冗余** 就像是协作的分布式进程，Zookeeper自己也会冗余一组服务器,称作ensemble。(TODO看过代码回头再检查下)\n\n<img src=\"../images/zkservice.jpg\">\nZookeeper内的服务器之间必须要互相知道对方。他们维护一个状态的内存镜像，事务日志，持久化快照。只要多数服务器可用，Zookeeper服务就可用。\n\n客户端链接一台服务器，客户端维护一个TCP链接，通过这个链接，发送请求，获得响应，监听事件，发送心跳。如果TCP链接断掉了，客户端会链接到其他服务上。\n\n**1.3 Zookeeper是有序的。** Zookeeper为每一个update打了一个邮戳，用来反映Zookeeper事务的顺序。后续的操作利用顺序实现更高层次的抽象，比如同步原语。\n\nZookeeper很快。尤其是在读占多数时。Zookeeper运行在上千个服务器上时，读写比达到10：1性能最优越。\n\n<a name=\"数据模型和层级命名空间\"></a>\n### 2、数据模型和层级命名空间 ###\nZookeeper的命名空间非常像标准的文件系统。一个命名就是有slash分割的路径。Zookeeper的每一个节点的命名空间就由一个路径来标识。\n<img src=\"../images/zknamespace.jpg\">\n\n<a name=\"节点和临时节点\"></a>\n### 3、节点和临时节点###\n和标准的文件系统不同的是，每一个节点都可以有数据和子节点。就像是说一个文件系统里，文件也是文件夹。(Zookeeper会存储这些数据：状态、配置、位置信息等，所以存在每一个节点的数据通常都比较小，KB范围内。)我们使用术语znode来描述我们Zookeeper的数据节点。\n\nZnode里有一个结构体stat。包含了version(数据、ACL变动次数)、时间戳，方便缓存校验和更新。当数据变动时，version递增。例如，当客户端获得数据的同时，也获得了数据的version。\n\n数据的存取都是原子性的。全部读，全部替换。每个节点有个ACL来限制谁有权限做什么。\nZookeeper有个临时节点的概念。当创建这个节点的session处于活跃状态，这样的节点就存在着。当session结束了，节点也就被删除掉了。如果要实现tbd,临时节点很有用。\n\n<a name=\"条件更新和监听\"></a>\n### 4、条件更新和监听###\nZookeeper支持监听的概念。客户端可以监听一个节点。当接单发生变化时，监听被触发，并且被移除掉。当监听被触发时，客户端接收到一个包，内容是某个节点发生了变化。当客户端和服务器端的链接断掉了，客户端会接到一个本地通知。这些可以在tbd中使用。\n\n<a name=\"保障\"></a>\n### 5、保障###\nZookeeper既快又简单。尽管Zookeeper的目标是作为构建像是同步这样复杂服务的基础，Zookeeper提供了多重保障。比如：\n\n顺序一致性：客户端的updates，保证生效按照发出的顺序。\n原子性：成功或失败，没有部分结果。\n单一系统镜像：客户端无论链接到哪个服务器，看到的结果都是一样的。\n可靠性: 当一个更新成功后，从这个时间开始，直到覆盖此更新，做持久化。\n及时性: 在某个时间范围内，客户端看到的镜像保障是最新的。\n更多信息，以及如何使用，参见tbd。\n\n<a name=\"简单的API\"></a>\n### 6、简单的API###\nZookeeper的一个设计目标是提供一个非常简单的编程接口。所以，只提供了下面这些操作：\ncreate : 在树的某个位置创建节点。\ndelete : 删除节点。\nexists : 检查在某个位置是否存在节点。\nget data : 从节点获取内容。\nset data : 写内容到节点。\nget children : 获得某个节点的子节点集合。\nsync : 等待广播数据。\n更多深层次讨论，以及如何用这些来实现更高层次的操作，参见 [tbd]\n\n<a name=\"实现\"></a>\n### 7、实现###\nZookeeper组件图展示出了Zookeeper服务中更高层次的组件。除了请求处理器,每个组件，对于每个Zookeeper服务器都有自己一套拷贝。\n\n<img src=\"../images/zkcomponents.jpg\">\n\n拷贝的数据库是个内存数据库，包含了整个树。所有的更新都会记录在硬盘上，保障可恢复性。写操作在应用到内存之前先序列化到硬盘上。\n\n所有的Zookeeper服务器为客户端提供服务。客户端链接精确链接到一台服务器上提交请求。对于读请求，每个server端的数据库拷贝提供服务。改变服务状态的请求，也就是写请求，是通过一致性协议处理。\n\n作为协议的一部分，所有的写请求都被转发到同一个服务器上，被称为leader。其他的服务器，称为followeres，接受来自leader的提案,同意消息传递。消息层面负责当leader失败时替换leader，以及同步follower和leader。\n\nZookeeper使用一个自定义的原子的消息协议。由于消息层面的原子性，Zookeeper可以保障本地复制不会偏差。leader接收到写请求后，计算系统的状态，并转换成一个事务，这个事务里封装了新的状态。\n\n<a name=\"使用\"></a>\n### 8、使用###\nzookeeper的接口非常精简。不过，使用这些接口，可以实现更高层次的操作，比如同步原语、组成员、所有权等。有些分布式系统已经使用了:[tbd:]更多信息,参考[tbd]\n\n<a name=\"性能\"></a>\n### 9、性能###\nZookeeper被设计成高性能的。但是，真相呢？Yahoo的Zookeeper开发团队的研究结果表明这是真的。(查看Zookeeper不同读写比的吞吐量。) 在读远大于写的场景中，是非常地高性能,因为写操作包含了所有服务器之间状态的同步。(读远高于写是分布式服务的典型场景。)\n\n<img src=\"../images/zkperfRW-3.2.jpg\" />\n图Zookeeper不同读写比下的吞吐量,是使用的Zookeeper 3.2版本的吞吐量图。Zookeeper运行在2Ghz的Xeon处理器和2个SATA 15K RPM硬盘上。1个硬盘用专门用来作为zookeeper的日志硬盘。快照落地到系统硬盘里。读、写的大小都是1k。\"服务器\"表示zookeeper集群服务器的数量，这些服务器共同提供服务。约30个其他的服务器用来模拟客户端。zookeeper集群配置，leader不接受客户端的连接。\n\n基准也表示出可靠性。图\"出现异常时的可靠性\"，显示出了部署节点如何应对各种失败。图中标记出的事件是：\n\n1、1个follower失败和恢复。\n2、另外一个follower失败和恢复。\n3、leader失败。\n4、2个follower失败和恢复。\n5、另外一个leader失败。\n\n<a name=\"可靠性\"></a>\n### 10、可靠性###\n为了展示当错误引入时，系统随着时间的表现。我们运行了一组包含7台服务器的zookeeper服务。我们运行和之前相同的饱和度，不过这次，保持写的比率在30%,这个比例是个保守估计。\n\n<img src=\"../images/zkperfreliability.jpg\" />\n\n图中能看到一些关键点。首先，如果follower失败，并且快速恢复，那么Zookeeper仍然能够维持一个很高的吞吐。更重要的，leader选举算法，让整个系统快速恢复，避免吞吐量大幅度降落。据我们观察，Zookeeper用了不到200ms来选举出leader。第三点，当follower恢复了，一旦开始处理请求，Zookeeper可以再次提升吞吐。\n\n\n<a name=\"Zookeeper项目\"></a>\n### 11、Zookeeper项目###\nZookeeper在很多工业应用有成功的案例。在雅虎，使用Zookeeper为雅虎消息Broker提供协调和故障恢复服务。雅虎的消息Broker是一个高度可扩展的发布-订阅系统，管理着上千的topic,用于同步和数据传递。在雅虎爬虫的抓取服务中也用到了，也用来管理故障恢复。一些雅虎的广告系统也用Zookeeper来实现可靠服务。\n\n鼓励所有的用户和开发者加入社区来贡献专业技能。参见Apache上的Zookeeper项目来获得更多信息。\n\n\n[原文](http://zookeeper.apache.org/doc/r3.4.8/zookeeperOver.html)\n`本站独自翻译，转载请注明出处`","source":"_posts/zookeeper001.md","raw":"---\ntitle: zookeeper概览\ndate: 2016-07-09 11:58:47\ntags: zookeeper\n---\n\n+ ZooKeeper: 用于分布式应用的分布式协调服务\n\t+ <a href=\"#设计目标\">1、设计目标</a>\n\t+ <a href=\"#数据模型和层级命名空间\">2、数据模型和层级命名空间</a>\n\t+ <a href=\"#节点和临时节点\">3、节点和临时节点</a>\n\t+ <a href=\"#条件更新和监听\">4、条件更新和监听</a>\n\t+ <a href=\"#保障\">5、保障</a>\n\t+ <a href=\"#简单的API\">6、简单的API</a>\n\t+ <a href=\"#实现\">7、实现</a>\n\t+ <a href=\"#使用\">8、使用</a>\n\t+ <a href=\"#性能\">9、性能</a>\n\t+ <a href=\"#可靠性\">10、可靠性</a>\n\t+ <a href=\"#Zookeeper项目\">11、Zookeeper项目</a>\n\n## ZooKeeper: 用于分布式应用的分布式协调服务 ##\n\nZookeeper是一个用于分布式应用上的分布式的、开源的协调服务。它暴露一组简单的组件，在此之上，分布式应用可以实现更高层次的服务，如同步、配置管理、分组和命名等。它被设计得易于开发，并且使用的数据模型也是基于熟识的文件系统的树形结构。运行在Java上，并且与Java和C绑定在一起。\n\n众所周知，分布式服务很难保证正确性。特别易于出现竟态条件或是死锁这样的错误。Zookeeper背后的动机就是，减轻分布式系统从0开始实现协调服务的重担。\n\n<a name=\"设计目标\"></a>\n### 1、设计目标 ###\n\n**1.1 Zookeeper很简单** Zookeeper允许分布式进程之间通过一个共享的命名空间协作交互。这个命名空间和标准的文件系统非常类似。命名空间里包含了注册的数据项，在Zookeeper术语上称为节点。这和文件系统很相似。但区别在于，典型的文件系统是基于存储设计的，Zookeeper的数据都保存在内存里。这意味着，Zookeeper可以获得高吞吐、低延迟。\n\nZookeeper实现时,花了很多精力在高性能、高可用和严格的存取顺序上。高性能意味着Zookeeper可以用在大规模的分布式系统里。可靠性意味着可以避免单点故障。严格的循序控制意味着，客户端可以实现复杂的同步原语。\n\n**1.2 Zookeeper的冗余** 就像是协作的分布式进程，Zookeeper自己也会冗余一组服务器,称作ensemble。(TODO看过代码回头再检查下)\n\n<img src=\"../images/zkservice.jpg\">\nZookeeper内的服务器之间必须要互相知道对方。他们维护一个状态的内存镜像，事务日志，持久化快照。只要多数服务器可用，Zookeeper服务就可用。\n\n客户端链接一台服务器，客户端维护一个TCP链接，通过这个链接，发送请求，获得响应，监听事件，发送心跳。如果TCP链接断掉了，客户端会链接到其他服务上。\n\n**1.3 Zookeeper是有序的。** Zookeeper为每一个update打了一个邮戳，用来反映Zookeeper事务的顺序。后续的操作利用顺序实现更高层次的抽象，比如同步原语。\n\nZookeeper很快。尤其是在读占多数时。Zookeeper运行在上千个服务器上时，读写比达到10：1性能最优越。\n\n<a name=\"数据模型和层级命名空间\"></a>\n### 2、数据模型和层级命名空间 ###\nZookeeper的命名空间非常像标准的文件系统。一个命名就是有slash分割的路径。Zookeeper的每一个节点的命名空间就由一个路径来标识。\n<img src=\"../images/zknamespace.jpg\">\n\n<a name=\"节点和临时节点\"></a>\n### 3、节点和临时节点###\n和标准的文件系统不同的是，每一个节点都可以有数据和子节点。就像是说一个文件系统里，文件也是文件夹。(Zookeeper会存储这些数据：状态、配置、位置信息等，所以存在每一个节点的数据通常都比较小，KB范围内。)我们使用术语znode来描述我们Zookeeper的数据节点。\n\nZnode里有一个结构体stat。包含了version(数据、ACL变动次数)、时间戳，方便缓存校验和更新。当数据变动时，version递增。例如，当客户端获得数据的同时，也获得了数据的version。\n\n数据的存取都是原子性的。全部读，全部替换。每个节点有个ACL来限制谁有权限做什么。\nZookeeper有个临时节点的概念。当创建这个节点的session处于活跃状态，这样的节点就存在着。当session结束了，节点也就被删除掉了。如果要实现tbd,临时节点很有用。\n\n<a name=\"条件更新和监听\"></a>\n### 4、条件更新和监听###\nZookeeper支持监听的概念。客户端可以监听一个节点。当接单发生变化时，监听被触发，并且被移除掉。当监听被触发时，客户端接收到一个包，内容是某个节点发生了变化。当客户端和服务器端的链接断掉了，客户端会接到一个本地通知。这些可以在tbd中使用。\n\n<a name=\"保障\"></a>\n### 5、保障###\nZookeeper既快又简单。尽管Zookeeper的目标是作为构建像是同步这样复杂服务的基础，Zookeeper提供了多重保障。比如：\n\n顺序一致性：客户端的updates，保证生效按照发出的顺序。\n原子性：成功或失败，没有部分结果。\n单一系统镜像：客户端无论链接到哪个服务器，看到的结果都是一样的。\n可靠性: 当一个更新成功后，从这个时间开始，直到覆盖此更新，做持久化。\n及时性: 在某个时间范围内，客户端看到的镜像保障是最新的。\n更多信息，以及如何使用，参见tbd。\n\n<a name=\"简单的API\"></a>\n### 6、简单的API###\nZookeeper的一个设计目标是提供一个非常简单的编程接口。所以，只提供了下面这些操作：\ncreate : 在树的某个位置创建节点。\ndelete : 删除节点。\nexists : 检查在某个位置是否存在节点。\nget data : 从节点获取内容。\nset data : 写内容到节点。\nget children : 获得某个节点的子节点集合。\nsync : 等待广播数据。\n更多深层次讨论，以及如何用这些来实现更高层次的操作，参见 [tbd]\n\n<a name=\"实现\"></a>\n### 7、实现###\nZookeeper组件图展示出了Zookeeper服务中更高层次的组件。除了请求处理器,每个组件，对于每个Zookeeper服务器都有自己一套拷贝。\n\n<img src=\"../images/zkcomponents.jpg\">\n\n拷贝的数据库是个内存数据库，包含了整个树。所有的更新都会记录在硬盘上，保障可恢复性。写操作在应用到内存之前先序列化到硬盘上。\n\n所有的Zookeeper服务器为客户端提供服务。客户端链接精确链接到一台服务器上提交请求。对于读请求，每个server端的数据库拷贝提供服务。改变服务状态的请求，也就是写请求，是通过一致性协议处理。\n\n作为协议的一部分，所有的写请求都被转发到同一个服务器上，被称为leader。其他的服务器，称为followeres，接受来自leader的提案,同意消息传递。消息层面负责当leader失败时替换leader，以及同步follower和leader。\n\nZookeeper使用一个自定义的原子的消息协议。由于消息层面的原子性，Zookeeper可以保障本地复制不会偏差。leader接收到写请求后，计算系统的状态，并转换成一个事务，这个事务里封装了新的状态。\n\n<a name=\"使用\"></a>\n### 8、使用###\nzookeeper的接口非常精简。不过，使用这些接口，可以实现更高层次的操作，比如同步原语、组成员、所有权等。有些分布式系统已经使用了:[tbd:]更多信息,参考[tbd]\n\n<a name=\"性能\"></a>\n### 9、性能###\nZookeeper被设计成高性能的。但是，真相呢？Yahoo的Zookeeper开发团队的研究结果表明这是真的。(查看Zookeeper不同读写比的吞吐量。) 在读远大于写的场景中，是非常地高性能,因为写操作包含了所有服务器之间状态的同步。(读远高于写是分布式服务的典型场景。)\n\n<img src=\"../images/zkperfRW-3.2.jpg\" />\n图Zookeeper不同读写比下的吞吐量,是使用的Zookeeper 3.2版本的吞吐量图。Zookeeper运行在2Ghz的Xeon处理器和2个SATA 15K RPM硬盘上。1个硬盘用专门用来作为zookeeper的日志硬盘。快照落地到系统硬盘里。读、写的大小都是1k。\"服务器\"表示zookeeper集群服务器的数量，这些服务器共同提供服务。约30个其他的服务器用来模拟客户端。zookeeper集群配置，leader不接受客户端的连接。\n\n基准也表示出可靠性。图\"出现异常时的可靠性\"，显示出了部署节点如何应对各种失败。图中标记出的事件是：\n\n1、1个follower失败和恢复。\n2、另外一个follower失败和恢复。\n3、leader失败。\n4、2个follower失败和恢复。\n5、另外一个leader失败。\n\n<a name=\"可靠性\"></a>\n### 10、可靠性###\n为了展示当错误引入时，系统随着时间的表现。我们运行了一组包含7台服务器的zookeeper服务。我们运行和之前相同的饱和度，不过这次，保持写的比率在30%,这个比例是个保守估计。\n\n<img src=\"../images/zkperfreliability.jpg\" />\n\n图中能看到一些关键点。首先，如果follower失败，并且快速恢复，那么Zookeeper仍然能够维持一个很高的吞吐。更重要的，leader选举算法，让整个系统快速恢复，避免吞吐量大幅度降落。据我们观察，Zookeeper用了不到200ms来选举出leader。第三点，当follower恢复了，一旦开始处理请求，Zookeeper可以再次提升吞吐。\n\n\n<a name=\"Zookeeper项目\"></a>\n### 11、Zookeeper项目###\nZookeeper在很多工业应用有成功的案例。在雅虎，使用Zookeeper为雅虎消息Broker提供协调和故障恢复服务。雅虎的消息Broker是一个高度可扩展的发布-订阅系统，管理着上千的topic,用于同步和数据传递。在雅虎爬虫的抓取服务中也用到了，也用来管理故障恢复。一些雅虎的广告系统也用Zookeeper来实现可靠服务。\n\n鼓励所有的用户和开发者加入社区来贡献专业技能。参见Apache上的Zookeeper项目来获得更多信息。\n\n\n[原文](http://zookeeper.apache.org/doc/r3.4.8/zookeeperOver.html)\n`本站独自翻译，转载请注明出处`","slug":"zookeeper001","published":1,"updated":"2016-08-14T23:08:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il840005vsjf6g6hyeng"},{"title":"zookeeper","date":"2016-07-09T03:56:56.000Z","_content":"\n今天开始整理zookeeper相关知识，这里是列表。\n\n<a href=\"../zookeeper001.html\">Zookeeper简介</a>\n<a href=\"../zookeeper002.html\">ZooKeeper入门指南</a>\n<a href=\"../zookeeper003.html\">获得源码</a>\n<a href=\"../zookeeper004.html\">Watcher和WatchedEvent</a>\n","source":"_posts/zookeeper.md","raw":"---\ntitle: zookeeper\ndate: 2016-07-09 11:56:56\ntags: zookeeper\n---\n\n今天开始整理zookeeper相关知识，这里是列表。\n\n<a href=\"../zookeeper001.html\">Zookeeper简介</a>\n<a href=\"../zookeeper002.html\">ZooKeeper入门指南</a>\n<a href=\"../zookeeper003.html\">获得源码</a>\n<a href=\"../zookeeper004.html\">Watcher和WatchedEvent</a>\n","slug":"zookeeper","published":1,"updated":"2016-08-18T01:01:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il890008vsjfvtfjgi51"},{"title":"written at the begining of 2016","date":"2016-02-03T14:50:19.000Z","_content":"\n2015惨到不想回顾。\n\n想要一个全新的2016。改变\n\n\n\n\n1、换一份工作\n\n#### 技术方面\n\n+ 基础\n\t+ 常用的数据结构(HashMap、HashTable、CocurrentHashMap)\n\t+ 并发编程\n\t+ JVM\n+ 进阶\n\t+ 组件\n\t\t+ Spring\n\t\t+ Struts\n\t\t+ Ibatis\n\t\t+ Hibernate\n\t\t+ Nodejs\n\t+ NIO/Netty\n\t+ 中间件\n\t\t+ RPC(thrift、pigeon)\n\t\t+ Cache(Memocached、Redis)\t\n\t\t+ Message(swallow)\n\t\t+ 分布式Zookeeper\n\t+ DB\n\t\t+ SQL(mysql、oracle)\n\t\t+ NOSQL(MongoDB)\n\n","source":"_posts/written-at-the-begining-of-2016.md","raw":"---\ntitle: written at the begining of 2016\ndate: 2016-02-03 22:50:19\ntags:\n---\n\n2015惨到不想回顾。\n\n想要一个全新的2016。改变\n\n\n\n\n1、换一份工作\n\n#### 技术方面\n\n+ 基础\n\t+ 常用的数据结构(HashMap、HashTable、CocurrentHashMap)\n\t+ 并发编程\n\t+ JVM\n+ 进阶\n\t+ 组件\n\t\t+ Spring\n\t\t+ Struts\n\t\t+ Ibatis\n\t\t+ Hibernate\n\t\t+ Nodejs\n\t+ NIO/Netty\n\t+ 中间件\n\t\t+ RPC(thrift、pigeon)\n\t\t+ Cache(Memocached、Redis)\t\n\t\t+ Message(swallow)\n\t\t+ 分布式Zookeeper\n\t+ DB\n\t\t+ SQL(mysql、oracle)\n\t\t+ NOSQL(MongoDB)\n\n","slug":"written-at-the-begining-of-2016","published":1,"updated":"2017-07-11T23:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8b000avsjfgvp2wyum"},{"title":"NIO","date":"2016-02-04T00:33:59.000Z","_content":"\n### 1、Unix下5中IO模型\n\n** 【1.1】 阻塞式IO(blocking I/O) **\n\t<img src=\"images/bio.png\" style=\"width:600px;\" />\n** 【1.2】 非阻塞式IO(nonblocking I/O) **\n\t<img src=\"images/nbio.png\" style=\"width:600px;\" />\n** 【1.3】 I/O复用(I/O multiplexing select/poll) **\n\t<img src=\"images/multi.png\" style=\"width:600px;\" />\n** 【1.4】 信号驱动式IO(signal-driven I/O) **\n\t<img src=\"images/signal.png\" style=\"width:600px;\" />\n** 【1.5】 异步IO() **\n\t<img src=\"images/aio.png\" style=\"width:600px;\" />\n** 【1.6】 5中I/O模型对比 **\n\t<img src=\"images/cp.png\" style=\"width:600px;\" />\n\n### 2、Java NIO\n\t\nJava NIO基于I/O复用技术的非阻塞I/O,不是异步I/O,1.4和1.5 update10之前的Selector基于select/poll，后使用epoll替换了select/poll 。NIO类库支持非阻塞读和写操作，相比于之前的同步阻塞读和写，是异步的。JDK1.7提供NIO2.0新增异步I/O。\n\n\n### 3、epoll相对于select/poll的优势\n\n** 【3.1】 ** select最大的缺陷就是单个进程所打开的socket描述符(FD)是有一定限制的，FD_SETSIZE默认是1024。epoll没有限制。\n\n** 【3.2】 ** 传统select/poll的另一个致命弱点，就是每次调用都会线性扫描所有socket集合，及时只有很少部分活跃。epoll只扫描活跃socket。\n\n** 【3.3】 ** 无论是select、poll还是epoll都需要内核把FD消息通知给用户空间，如何避免内存复制就显得非常重要，epoll是通过内核和用户空间mmap同一块内存来实现。\n\n** 【3.4】 ** epoll的api更简单。\n\n\n","source":"_posts/nio.md","raw":"---\ntitle: NIO\ndate: 2016-02-04 08:33:59\ntags:\n---\n\n### 1、Unix下5中IO模型\n\n** 【1.1】 阻塞式IO(blocking I/O) **\n\t<img src=\"images/bio.png\" style=\"width:600px;\" />\n** 【1.2】 非阻塞式IO(nonblocking I/O) **\n\t<img src=\"images/nbio.png\" style=\"width:600px;\" />\n** 【1.3】 I/O复用(I/O multiplexing select/poll) **\n\t<img src=\"images/multi.png\" style=\"width:600px;\" />\n** 【1.4】 信号驱动式IO(signal-driven I/O) **\n\t<img src=\"images/signal.png\" style=\"width:600px;\" />\n** 【1.5】 异步IO() **\n\t<img src=\"images/aio.png\" style=\"width:600px;\" />\n** 【1.6】 5中I/O模型对比 **\n\t<img src=\"images/cp.png\" style=\"width:600px;\" />\n\n### 2、Java NIO\n\t\nJava NIO基于I/O复用技术的非阻塞I/O,不是异步I/O,1.4和1.5 update10之前的Selector基于select/poll，后使用epoll替换了select/poll 。NIO类库支持非阻塞读和写操作，相比于之前的同步阻塞读和写，是异步的。JDK1.7提供NIO2.0新增异步I/O。\n\n\n### 3、epoll相对于select/poll的优势\n\n** 【3.1】 ** select最大的缺陷就是单个进程所打开的socket描述符(FD)是有一定限制的，FD_SETSIZE默认是1024。epoll没有限制。\n\n** 【3.2】 ** 传统select/poll的另一个致命弱点，就是每次调用都会线性扫描所有socket集合，及时只有很少部分活跃。epoll只扫描活跃socket。\n\n** 【3.3】 ** 无论是select、poll还是epoll都需要内核把FD消息通知给用户空间，如何避免内存复制就显得非常重要，epoll是通过内核和用户空间mmap同一块内存来实现。\n\n** 【3.4】 ** epoll的api更简单。\n\n\n","slug":"nio","published":1,"updated":"2016-03-12T09:52:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8d000bvsjf8xuuaypj"},{"title":"Java多线程面试题汇集","date":"2016-02-29T23:27:58.000Z","_content":"\n#### 1、Thread.sleep、Thread.yield和Object.wait的区别 ####\n\n\n\ta) Thread.yield: 通知scheduler,当前线程准备放弃当前正在使用的cpu。scheduler也可以忽略此通知。让出cpu,进入待执行状态。有可能继续获得cpu时间片。不会让给优先级低的线程。不释放锁。\n\tb) Thread.sleep: 释放cpu,可能会让给优先级低的线程。不释放锁。\n\tc) Object.wait:释放cpu,释放锁，必须在synchronized中执行。\n\n\n#### 2、哪些原因会导致共享变量，在其他线程无法及时看到最新值？####\n\n\ta) 在编译器中生成的指令顺序，可以与源码中的顺序不同。此外，编译器还会把变量保存在寄存器中而不是内存中。\n\tb) 处理器可以采用乱序或并行等方式来执行指令。\n\tc) 缓存可能会改变将写入变量提交到内存的次序。\n\td) 保存在处理器本地缓存中的值，对于其他处理器是不可见的。\n\n#### 3、volatile的作用####\n\n\ta) 64位(double、long)原子操作\n\tb) 内存可见性,volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方。JIT编译器生成的汇编指令,多了一行lock前缀的指令,作用是这个变量所在缓存行的数据写回到系统内存。每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期，置为无效。\n\tc) 禁止指令重排(Instruction Reorder),包含编译器和运行时指令重排。\n\tR) http://www.infoq.com/cn/articles/ftf-java-volatile\n\n#### 4、ThreadLocal的用法#### \n\n\t关键字:静态key,每个线程不同的value; 线程局部变量。Thread对象有个实例变量java.lang.Thread.threadLocals,类型是ThreadLocalMap,是ThreadLocal的内部类。理解为map,ThreadLocal对象就是map的key。initialValue方法，在首次调用get时会被调用。\n\t常用：com.ibatis.sqlmap.engine.impl.SqlMapClientImpl.localSqlMapSession、hibernate.session。\n\tThreadLocal和Synchonized都用于解决多线程并发访问。但是ThreadLocal与synchronized有本质的区别。Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。\n#### 5、IllegalMonitorStateException#### \n\n\twait/notify/notifyAll ,在没有获得锁的情况下,想要释放锁或是唤起其他线程获得锁。\n\n#### 6、Thread.isInterrupted() 和 interrupted()区别#### \n\tinterrupted()静态方法,清理中断状态。isInterrupted,不清理中断状态。2个方法其实调用的同一个native方法\n\tprivate native boolean isInterrupted(boolean ClearInterrupted);\n\n\n#### 7、使用notify() 还是 notifyAll()#### \n\t关键字: block状态/wait状态\n\t单一条件的时候notify(),否则notifyAll()\n\t例: size = 1 的buffer,按照下面的顺序\n\tP1\n\tP2,P3 wait\n\tC1\n\tC2,C3 block\n\tC1->P2\n\tP2,C2,C3竞争 C2 wati C3wait\n\tP2->P3 P3wait\n\t3个都wait\n\n#### 8、Synchronized关键字锁的是什么对象#### \n\t\n\ta) 对于同步方法，锁是当前示例的对象。\n\tb) 对于静态同步方法，锁是当前对象的Class对象。\n\tc) 对于同步方法块，锁是Synchonized括号里配置的对象。\n\n#### 9、Callable和Runnable有什么区别#### \n\t\n\ta) 两个接口,Callable的方法是call,Runnable的方法是run。\n\tb) Runnable作为基本的任务表示形式，但有一定的局限性：不能返回一个值或是跑出一个受检查的异常。\n\tc) Callable是一个更好的抽象：它认为主入口点(即call)将返回一个值,并可能抛出一个异常。\n\td) Callable和Runnalbe都可以应用于Executors框架,Thread只支持Runnable。\n\n#### 10、Synchronized和Lock的区别#### \n\t\n\ta) Lock是接口,Synchronized是关键字,内置锁。\n\tb) Synchronized是JVM软件层面的实现，Lock依赖于机器指令。CAS  ??\n\tc) Lock提供了轮询锁、定时锁、可中断锁、非结构加锁、读写锁、公平锁。\n\td) Synchronized自动释放锁。lock一般要在finally手动释放。\n\n#### 11、预防和防止数据库死锁 ####\n\t\n\ta) 避免并行的占用多个锁、多个资源。比如，某些业务可以不使用事务。\n\tb) 如果一定是事务的，尝试在事务中，获取锁的顺序一致。\n\tc) 缩小锁的范围，将大的事务分解为几个小事务。\n\td) 缩短占锁的时间,事务时间。 \n\td) 使用乐观锁代替独占锁。\n\n\t\n","source":"_posts/multi-thread-interview.md","raw":"---\ntitle: Java多线程面试题汇集\ndate: 2016-03-01 07:27:58\ntags:\n---\n\n#### 1、Thread.sleep、Thread.yield和Object.wait的区别 ####\n\n\n\ta) Thread.yield: 通知scheduler,当前线程准备放弃当前正在使用的cpu。scheduler也可以忽略此通知。让出cpu,进入待执行状态。有可能继续获得cpu时间片。不会让给优先级低的线程。不释放锁。\n\tb) Thread.sleep: 释放cpu,可能会让给优先级低的线程。不释放锁。\n\tc) Object.wait:释放cpu,释放锁，必须在synchronized中执行。\n\n\n#### 2、哪些原因会导致共享变量，在其他线程无法及时看到最新值？####\n\n\ta) 在编译器中生成的指令顺序，可以与源码中的顺序不同。此外，编译器还会把变量保存在寄存器中而不是内存中。\n\tb) 处理器可以采用乱序或并行等方式来执行指令。\n\tc) 缓存可能会改变将写入变量提交到内存的次序。\n\td) 保存在处理器本地缓存中的值，对于其他处理器是不可见的。\n\n#### 3、volatile的作用####\n\n\ta) 64位(double、long)原子操作\n\tb) 内存可见性,volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方。JIT编译器生成的汇编指令,多了一行lock前缀的指令,作用是这个变量所在缓存行的数据写回到系统内存。每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期，置为无效。\n\tc) 禁止指令重排(Instruction Reorder),包含编译器和运行时指令重排。\n\tR) http://www.infoq.com/cn/articles/ftf-java-volatile\n\n#### 4、ThreadLocal的用法#### \n\n\t关键字:静态key,每个线程不同的value; 线程局部变量。Thread对象有个实例变量java.lang.Thread.threadLocals,类型是ThreadLocalMap,是ThreadLocal的内部类。理解为map,ThreadLocal对象就是map的key。initialValue方法，在首次调用get时会被调用。\n\t常用：com.ibatis.sqlmap.engine.impl.SqlMapClientImpl.localSqlMapSession、hibernate.session。\n\tThreadLocal和Synchonized都用于解决多线程并发访问。但是ThreadLocal与synchronized有本质的区别。Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。\n#### 5、IllegalMonitorStateException#### \n\n\twait/notify/notifyAll ,在没有获得锁的情况下,想要释放锁或是唤起其他线程获得锁。\n\n#### 6、Thread.isInterrupted() 和 interrupted()区别#### \n\tinterrupted()静态方法,清理中断状态。isInterrupted,不清理中断状态。2个方法其实调用的同一个native方法\n\tprivate native boolean isInterrupted(boolean ClearInterrupted);\n\n\n#### 7、使用notify() 还是 notifyAll()#### \n\t关键字: block状态/wait状态\n\t单一条件的时候notify(),否则notifyAll()\n\t例: size = 1 的buffer,按照下面的顺序\n\tP1\n\tP2,P3 wait\n\tC1\n\tC2,C3 block\n\tC1->P2\n\tP2,C2,C3竞争 C2 wati C3wait\n\tP2->P3 P3wait\n\t3个都wait\n\n#### 8、Synchronized关键字锁的是什么对象#### \n\t\n\ta) 对于同步方法，锁是当前示例的对象。\n\tb) 对于静态同步方法，锁是当前对象的Class对象。\n\tc) 对于同步方法块，锁是Synchonized括号里配置的对象。\n\n#### 9、Callable和Runnable有什么区别#### \n\t\n\ta) 两个接口,Callable的方法是call,Runnable的方法是run。\n\tb) Runnable作为基本的任务表示形式，但有一定的局限性：不能返回一个值或是跑出一个受检查的异常。\n\tc) Callable是一个更好的抽象：它认为主入口点(即call)将返回一个值,并可能抛出一个异常。\n\td) Callable和Runnalbe都可以应用于Executors框架,Thread只支持Runnable。\n\n#### 10、Synchronized和Lock的区别#### \n\t\n\ta) Lock是接口,Synchronized是关键字,内置锁。\n\tb) Synchronized是JVM软件层面的实现，Lock依赖于机器指令。CAS  ??\n\tc) Lock提供了轮询锁、定时锁、可中断锁、非结构加锁、读写锁、公平锁。\n\td) Synchronized自动释放锁。lock一般要在finally手动释放。\n\n#### 11、预防和防止数据库死锁 ####\n\t\n\ta) 避免并行的占用多个锁、多个资源。比如，某些业务可以不使用事务。\n\tb) 如果一定是事务的，尝试在事务中，获取锁的顺序一致。\n\tc) 缩小锁的范围，将大的事务分解为几个小事务。\n\td) 缩短占锁的时间,事务时间。 \n\td) 使用乐观锁代替独占锁。\n\n\t\n","slug":"multi-thread-interview","published":1,"updated":"2016-03-23T05:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8f000cvsjfkfica0na"},{"title":"深入理解Java虚拟机笔记","date":"2016-03-02T05:56:04.000Z","_content":"","source":"_posts/jvm.md","raw":"---\ntitle: 深入理解Java虚拟机笔记\ndate: 2016-03-02 13:56:04\ntags:\n---\n","slug":"jvm","published":1,"updated":"2016-03-02T06:02:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8h000dvsjfbcwx06cs"},{"title":"java-interview","date":"2016-03-12T09:52:31.000Z","_content":"\n\n金额\n分布式缓存\n大并发\nlock\n内存模型\n\n\n#### 1、Servlet生命周期 ####\n\n\n\ta) \n","source":"_posts/java-interview.md","raw":"---\ntitle: java-interview\ndate: 2016-03-12 17:52:31\ntags:\n---\n\n\n金额\n分布式缓存\n大并发\nlock\n内存模型\n\n\n#### 1、Servlet生命周期 ####\n\n\n\ta) \n","slug":"java-interview","published":1,"updated":"2016-03-23T05:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8k000evsjfmqf82b4m"},{"title":"hexo guide","date":"2016-02-29T23:27:07.000Z","_content":"","source":"_posts/hexo-guide.md","raw":"---\ntitle: hexo guide\ndate: 2016-03-01 07:27:07\ntags:\n---\n","slug":"hexo-guide","published":1,"updated":"2016-02-29T23:27:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8m000fvsjf0mzk13op"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-02-03T14:18:58.000Z","updated":"2016-02-03T14:18:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8o000gvsjf6332mvrp"},{"title":"centos_wordpress","date":"2016-02-18T05:10:40.000Z","_content":"\n\n### Aliyun Ecs Centos 64bit .install wordpress\n\n#### 1、install apache\n\n1.1 查询是否安装，若没有返回信息则没有安装。\n\t```\tbash\n\trpm -qa httpd \n\t```\n1.2 安装apache。\n\t```\tbash\n\tyum install httpd -y\n\t```\n1.3 启动\n\t```\tbash\n\tservice httpd start\n\tservice httpd stop\n\tservice httpd restart\n\t```\n\n#### 2、install mysql\n\n2.1 查询mysql是否安装\n\t``` bash\n\trpm -qa mysql\n\t```\n2.2 查询yum服务器上mysql\n\t``` bash\n\tyum list | grep mysql\n\t```\n2.3 安装mysql\n\t```\n\tyum install -y mysql-server mysql-devel mysql\n\t```\n2.4 mysql是否自动启动,设置mysqld自动启动\n\t```\n\tchkconfig --list | grep mysql\n\tchkconfig mysqld on\n\t```\n\n2.5 启动mysql\n\t```\n\tservice mysqld start\n\t```\n2.6 修改密码\n\t```\n\tmysqladmin -u root password ''\n\n\t```\n\n#### 3、install php\n\n3.1 安装php\n\t``` bash\n\tyum install php php-devel\n\t```\n3.2 安装php扩展\n\t``` bash\n\tyum install php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\n\t```\n#### 4、install ftp\n\n4.1 install ftp\n\t``` bash\n\tyum -y install vsftpd \n\t```\n4.2 取消匿名登录\n\t```\n\tvi /etc/vsftpd/vsftpd.conf\n\tanonymous_enable=NO\n\t```\n4.3 创建一个用户\n\t```\n\tuseradd ftpuser \n\tpasswd ftpuser \n\t```\n\t\n\n\n\n\t","source":"_posts/centos-wordpress.md","raw":"---\ntitle: centos_wordpress\ndate: 2016-02-18 13:10:40\ntags:\n---\n\n\n### Aliyun Ecs Centos 64bit .install wordpress\n\n#### 1、install apache\n\n1.1 查询是否安装，若没有返回信息则没有安装。\n\t```\tbash\n\trpm -qa httpd \n\t```\n1.2 安装apache。\n\t```\tbash\n\tyum install httpd -y\n\t```\n1.3 启动\n\t```\tbash\n\tservice httpd start\n\tservice httpd stop\n\tservice httpd restart\n\t```\n\n#### 2、install mysql\n\n2.1 查询mysql是否安装\n\t``` bash\n\trpm -qa mysql\n\t```\n2.2 查询yum服务器上mysql\n\t``` bash\n\tyum list | grep mysql\n\t```\n2.3 安装mysql\n\t```\n\tyum install -y mysql-server mysql-devel mysql\n\t```\n2.4 mysql是否自动启动,设置mysqld自动启动\n\t```\n\tchkconfig --list | grep mysql\n\tchkconfig mysqld on\n\t```\n\n2.5 启动mysql\n\t```\n\tservice mysqld start\n\t```\n2.6 修改密码\n\t```\n\tmysqladmin -u root password ''\n\n\t```\n\n#### 3、install php\n\n3.1 安装php\n\t``` bash\n\tyum install php php-devel\n\t```\n3.2 安装php扩展\n\t``` bash\n\tyum install php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\n\t```\n#### 4、install ftp\n\n4.1 install ftp\n\t``` bash\n\tyum -y install vsftpd \n\t```\n4.2 取消匿名登录\n\t```\n\tvi /etc/vsftpd/vsftpd.conf\n\tanonymous_enable=NO\n\t```\n4.3 创建一个用户\n\t```\n\tuseradd ftpuser \n\tpasswd ftpuser \n\t```\n\t\n\n\n\n\t","slug":"centos-wordpress","published":1,"updated":"2016-02-20T02:15:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8p000hvsjfxm8yjafa"},{"title":"architectrue","date":"2016-03-10T11:50:00.000Z","_content":"\n\n+ 架构师\n\t+ HA\n\t+ 分布式\n\t+ 缓存\n\t+ mysql\n\t+ final finally finalize\n\t+ final后return\n\t+ class加载\n\n\n1、了解mysql索引原理。\n2、研读过Rpc框架部分源码。\n3、了解NIO/Netty。\n4、熟悉常用设计模式。\n5、消息队列、缓存。(TODO)\n6、JVM性能调优。\n7、了解分布式。\n8、了解签名、加解密。","source":"_posts/architectrue.md","raw":"---\ntitle: architectrue\ndate: 2016-03-10 19:50:00\ntags:\n---\n\n\n+ 架构师\n\t+ HA\n\t+ 分布式\n\t+ 缓存\n\t+ mysql\n\t+ final finally finalize\n\t+ final后return\n\t+ class加载\n\n\n1、了解mysql索引原理。\n2、研读过Rpc框架部分源码。\n3、了解NIO/Netty。\n4、熟悉常用设计模式。\n5、消息队列、缓存。(TODO)\n6、JVM性能调优。\n7、了解分布式。\n8、了解签名、加解密。","slug":"architectrue","published":1,"updated":"2016-03-10T12:51:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8q000ivsjfc9xptlyt"},{"title":"ActiveMQ","date":"2016-08-28T03:58:47.000Z","_content":"\n","source":"_posts/activemq.md","raw":"---\ntitle: ActiveMQ\ndate: 2016-08-28 11:58:47\ntags: ActiveMQ\n---\n\n","slug":"activemq","published":1,"updated":"2016-08-28T14:36:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8s000jvsjfzz8ezd4z"},{"title":"activemq-install","date":"2016-08-28T14:35:26.000Z","_content":"\n### 1、安装###\n\nmvn clean install\n\n### 2、运行###\n\nbroker: ${ACTIVEMQ_HOME}/bin/activemq console\n\n${ACTIVEMQ_HOME}/bin/activemq producer\n${ACTIVEMQ_HOME}/bin/activemq consumer","source":"_posts/activemq-install.md","raw":"---\ntitle: activemq-install\ndate: 2016-08-28 22:35:26\ntags:\n---\n\n### 1、安装###\n\nmvn clean install\n\n### 2、运行###\n\nbroker: ${ACTIVEMQ_HOME}/bin/activemq console\n\n${ACTIVEMQ_HOME}/bin/activemq producer\n${ACTIVEMQ_HOME}/bin/activemq consumer","slug":"activemq-install","published":1,"updated":"2016-08-30T23:59:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8u000mvsjfh67hxaku"},{"title":"activemq-in-action-index","date":"2016-09-17T07:32:49.000Z","_content":"\n\n+ Part 1 An introducation to messaging and ActiveMQ\n\t+ 1 Introducation to ActiveMQ\n\t\t+ 1.1 ActiveMQ features\n\t\t+ 1.2 Using ActiveMQ: why and when?\n\t\t+ 1.3 Getting started with ActiveMQ\n\t\t+ 1.4 Running your first example with ActiveMQ\n\t\t+ 1.5 Summary \n\t+ 2、Understanding message-oriented middleware and JMS\n\t\t+ 2.1 Introduction to enterprise messaging.\n\t\t+ 2.2 What's message-oriented middleware.\n\t\t+ 2.3 What's the Java Message Service?\n\t\t+ 2.4 The JMS specification\n\t\t\t+ `JMS clients` `Non-JMS clients` `The JMS provider` `The JMS message` `JMS message internals` `Message selectors` `JMS domains` `Adminisitered objects`\n\t\t+ 2.5 Using the JMS API to create JMS applications\n\t\t+ 2.6 Summary\n\t+ 3、The ActiveMQ in Action examples.\n+ Part 2 Configuring standard ActiveMQ components\t\n\t+ 4、 Connecting to ActiveMQ\n\t+ 5、 ActiveMQ message storage\n\t+ 6、 Securing ActiveMQ\n+ Part 3 Using ActiveMQ to build messaging applications\n\t+ 7、 Creating Java applications with ActiveMQ\n\t+ 8、 Integrating ActiveMQ with application servers\n\t+ 9、 ActiveMQ messaging for other language\n+ Part 4 Advanced features in ActiveMQ\n\t+ 10、 Deploying ActiveMQ in the enterprise\n\t+ 11、 ActiveMQ broker features in action\n\t+ 12、 Advanced client options\n\t+ 13、 Turning ActiveMQ for performance\n\t+ 14、 Administering and monitoring ActiveMQ\n","source":"_posts/activemq-in-action-index.md","raw":"---\ntitle: activemq-in-action-index\ndate: 2016-09-17 15:32:49\ntags:\n---\n\n\n+ Part 1 An introducation to messaging and ActiveMQ\n\t+ 1 Introducation to ActiveMQ\n\t\t+ 1.1 ActiveMQ features\n\t\t+ 1.2 Using ActiveMQ: why and when?\n\t\t+ 1.3 Getting started with ActiveMQ\n\t\t+ 1.4 Running your first example with ActiveMQ\n\t\t+ 1.5 Summary \n\t+ 2、Understanding message-oriented middleware and JMS\n\t\t+ 2.1 Introduction to enterprise messaging.\n\t\t+ 2.2 What's message-oriented middleware.\n\t\t+ 2.3 What's the Java Message Service?\n\t\t+ 2.4 The JMS specification\n\t\t\t+ `JMS clients` `Non-JMS clients` `The JMS provider` `The JMS message` `JMS message internals` `Message selectors` `JMS domains` `Adminisitered objects`\n\t\t+ 2.5 Using the JMS API to create JMS applications\n\t\t+ 2.6 Summary\n\t+ 3、The ActiveMQ in Action examples.\n+ Part 2 Configuring standard ActiveMQ components\t\n\t+ 4、 Connecting to ActiveMQ\n\t+ 5、 ActiveMQ message storage\n\t+ 6、 Securing ActiveMQ\n+ Part 3 Using ActiveMQ to build messaging applications\n\t+ 7、 Creating Java applications with ActiveMQ\n\t+ 8、 Integrating ActiveMQ with application servers\n\t+ 9、 ActiveMQ messaging for other language\n+ Part 4 Advanced features in ActiveMQ\n\t+ 10、 Deploying ActiveMQ in the enterprise\n\t+ 11、 ActiveMQ broker features in action\n\t+ 12、 Advanced client options\n\t+ 13、 Turning ActiveMQ for performance\n\t+ 14、 Administering and monitoring ActiveMQ\n","slug":"activemq-in-action-index","published":1,"updated":"2016-10-10T23:51:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8w000nvsjfbgpfmw93"},{"title":"NIOServerCnxnFactory","date":"2017-07-02T08:36:13.000Z","_content":"\n\n## 简介 ##\n\nZookeeper 默认的ServerCnxnFactory的实现。顾名思义，采用非阻塞通信方式。特点是采用了多个线程来分别处理各类型事件。\n\n### 1、1个accept thread.###\n##### 1.1 类结构 ##### \n```AcceptThread->AbstractSelectThread->ZooKeeperThread```\n##### 1.2 解释 #####\n+ a) 每个AbstractSelectThread的对象都维持这一个 selector```this.selector = Selector.open()``` 。\n+ b) acceptThread对象把ServerSocketChannel的OP_ACCEPT事件注册到本对象的 selector 上。\n+ c) 当一个新的链接 被 accept之后,就把此链接的处理交给某个selectThread,通过调用```SelectorThread.addAcceptedConnection(SocketChannel)```,采用Round-robin策略,其实就是```iterator.next()```。这个时候一个socket接入完成，剩下的是selector thread的事了。\n\n### 2、1-n个 selector threads.###\n##### 2.1 类结构 ##### \nSelectorThread->AbstractSelectThread->ZooKeeperThread\n##### 2.2 解释 #####\n+ a) 当一个acceptThread把SocketChanel传给selectorThread时,调用的addAcceptedConnection，这个方法是把socketChannel加到acceptedQueue里,每个acceptThread有一个LinkedBlockingQueue类型的队列。(而且我看的版本LinkedBlockingQueue没设置大小。)\n+ b) selectThread的run方法里。\n\t1. select \n\t2. 把readable和writable的selectionKey封装成IOWorkRequest对象,放到workerPool(work threads)里。放到workerPool之前,把selectionKey的interest ops清除,及NIOServerCnxn disableSelectable。\n\t3. 把acceptedQueue的socket的OP_READ注册到selector上。\n\t4. 处理updateQueue 。workThread在处理完IO后，把SelectionKey加到updateQueue里。在这里恢复SelectionKey的interestOps。\n\n### 3、0-m个 work threads.###\n##### 3.1 结构 ##### \norg.apache.zookeeper.server.WorkerService,其中实例变量:ArrayList<ExecutorService> workers = new ArrayList<ExecutorService>();\n##### 3.2 解释 #####\n+ a) 处理IO\n+ b) cnxn.enableSelectable\n+ c) 把key加到updateQueue中。\n\n### 4、connection expiration thread ###\n类结构ConnectionExpirerThread->ZooKeeperThread","source":"_posts/NIOServerCnxnFactory.md","raw":"---\ntitle: NIOServerCnxnFactory\ndate: 2017-07-02 16:36:13\ntags: zookeeper\n---\n\n\n## 简介 ##\n\nZookeeper 默认的ServerCnxnFactory的实现。顾名思义，采用非阻塞通信方式。特点是采用了多个线程来分别处理各类型事件。\n\n### 1、1个accept thread.###\n##### 1.1 类结构 ##### \n```AcceptThread->AbstractSelectThread->ZooKeeperThread```\n##### 1.2 解释 #####\n+ a) 每个AbstractSelectThread的对象都维持这一个 selector```this.selector = Selector.open()``` 。\n+ b) acceptThread对象把ServerSocketChannel的OP_ACCEPT事件注册到本对象的 selector 上。\n+ c) 当一个新的链接 被 accept之后,就把此链接的处理交给某个selectThread,通过调用```SelectorThread.addAcceptedConnection(SocketChannel)```,采用Round-robin策略,其实就是```iterator.next()```。这个时候一个socket接入完成，剩下的是selector thread的事了。\n\n### 2、1-n个 selector threads.###\n##### 2.1 类结构 ##### \nSelectorThread->AbstractSelectThread->ZooKeeperThread\n##### 2.2 解释 #####\n+ a) 当一个acceptThread把SocketChanel传给selectorThread时,调用的addAcceptedConnection，这个方法是把socketChannel加到acceptedQueue里,每个acceptThread有一个LinkedBlockingQueue类型的队列。(而且我看的版本LinkedBlockingQueue没设置大小。)\n+ b) selectThread的run方法里。\n\t1. select \n\t2. 把readable和writable的selectionKey封装成IOWorkRequest对象,放到workerPool(work threads)里。放到workerPool之前,把selectionKey的interest ops清除,及NIOServerCnxn disableSelectable。\n\t3. 把acceptedQueue的socket的OP_READ注册到selector上。\n\t4. 处理updateQueue 。workThread在处理完IO后，把SelectionKey加到updateQueue里。在这里恢复SelectionKey的interestOps。\n\n### 3、0-m个 work threads.###\n##### 3.1 结构 ##### \norg.apache.zookeeper.server.WorkerService,其中实例变量:ArrayList<ExecutorService> workers = new ArrayList<ExecutorService>();\n##### 3.2 解释 #####\n+ a) 处理IO\n+ b) cnxn.enableSelectable\n+ c) 把key加到updateQueue中。\n\n### 4、connection expiration thread ###\n类结构ConnectionExpirerThread->ZooKeeperThread","slug":"NIOServerCnxnFactory","published":1,"updated":"2017-07-11T23:11:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9g8il8x000ovsjf63qg4b4j"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj9g8il840005vsjf6g6hyeng","tag_id":"cj9g8il850006vsjfi5vzv4jx","_id":"cj9g8il880007vsjf6ei22tid"},{"post_id":"cj9g8il890008vsjfvtfjgi51","tag_id":"cj9g8il850006vsjfi5vzv4jx","_id":"cj9g8il8a0009vsjfzhl7swne"},{"post_id":"cj9g8il8s000jvsjfzz8ezd4z","tag_id":"cj9g8il8t000kvsjftfbqsupr","_id":"cj9g8il8u000lvsjfcce3osth"},{"post_id":"cj9g8il8x000ovsjf63qg4b4j","tag_id":"cj9g8il850006vsjfi5vzv4jx","_id":"cj9g8il8y000pvsjfrdpbpyqr"}],"Tag":[{"name":"zookeeper","_id":"cj9g8il850006vsjfi5vzv4jx"},{"name":"ActiveMQ","_id":"cj9g8il8t000kvsjftfbqsupr"}]}}